{"version":3,"sources":["logo.svg","Map.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapContainer","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","defineProperty","selectedPlace","lat","long","showingInfoWindow","activeMarker","onMarkerClick","marker","e","setState","onClose","inherits","createClass","key","value","_this2","react_default","a","createElement","className","google_maps_react_dist","google","zoom","initialCenter","lng","style","width","height","stations","map","station","index","dist","lat0","lng0","x","y","Math","cos","sqrt","distance","toFixed","onClick","name","concat","position","address","visible","Component","GoogleApiWrapper","apiKey","Home","loadMap","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","axios","get","then","res","newStations","data","forEach","console","log","push","district_name","_this3","react_typography_dist","react_button_dist_default","Map","App","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yMCUjC,IAAMC,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAGVQ,MAJmBN,OAAAO,EAAA,EAAAP,CAAA,CAKfQ,cAAe,QACfC,KAAM,EACNC,MAAO,EAEHC,mBAAmB,EACnBC,aAAc,IAVH,gBAWI,IAXJb,EAgBnBc,cAAgB,SAACf,EAAOgB,EAAQC,GAC5BhB,EAAKiB,SAAS,CACVR,cAAeV,EACfc,aAAcE,EACdH,mBAAmB,KApBRZ,EAwBnBkB,QAAU,SAAAnB,GACFC,EAAKO,MAAMK,mBACfZ,EAAKiB,SAAS,CACVL,mBAAmB,EACnBC,aAAc,QA5BHb,EADvB,OAAAC,OAAAkB,EAAA,EAAAlB,CAAAJ,EAAAC,GAAAG,OAAAmB,EAAA,EAAAnB,CAAAJ,EAAA,EAAAwB,IAAA,SAAAC,MAAA,WAkCW,IAAAC,EAAApB,KACL,OAAuB,IAApBA,KAAKJ,MAAMW,MAAmC,IAArBP,KAAKJ,MAAMY,KACnCa,EAAAC,EAAAC,cAAA,yCAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEjBH,EAAAC,EAAAC,cAACE,EAAA,IAAD,CAAKC,OAAQ1B,KAAKJ,MAAM8B,OAAQC,KAAM,GAEtCC,cAAe,CACbrB,IAAKP,KAAKJ,MAAMW,IAChBsB,IAAK7B,KAAKJ,MAAMY,MAElBsB,MAAS,CACPC,MAAO,OACPC,OAAQ,QAGNhC,KAAKJ,MAAMqC,SAASC,IAAI,SAACC,EAAQC,GAC9B,IAAIC,EA5DjB,SAAkB9B,EAAKsB,EAAKS,EAAMC,GAClC,IACIC,EAAIjC,EAAM+B,EACVG,GAAKZ,EAAMU,GAAMG,KAAKC,IAAIL,GAC9B,OAHa,OAGCI,KAAKE,KAAKJ,EAAEA,EAAIC,EAAEA,GAwDRI,CAASzB,EAAKxB,MAAMW,IAAIa,EAAKxB,MAAMY,KAAK2B,EAAQ5B,IAAI4B,EAAQN,KAExE,OADCQ,EAAOA,EAAKS,QAAQ,GAErBzB,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAASsB,QAAS3B,EAAKT,cAAeqC,KAAI,GAAAC,OAAKd,EAAQa,KAAb,4BAA4C9B,IAAOkB,EAAOc,SAAU,CAAC3C,IAAK4B,EAAQ5B,IAAKsB,IAAKM,EAAQN,KAAMsB,QAAShB,EAAQgB,QAASN,SAAUR,MAG5LhB,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQsB,QAAS/C,KAAKW,cACdqC,KAAM,qBAId3B,EAAAC,EAAAC,cAACE,EAAA,WAAD,CACAb,OAAQZ,KAAKI,MAAMM,aACnB0C,QAASpD,KAAKI,MAAMK,kBACpBM,QAASf,KAAKe,SAEVM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKvB,KAAKI,MAAME,cAAc0C,MAC9B3B,EAAAC,EAAAC,cAAA,SAAIvB,KAAKI,MAAME,cAAc6C,SAC5BnD,KAAKI,MAAME,cAAcuC,UAAaxB,EAAAC,EAAAC,cAAA,+BAAuBvB,KAAKI,MAAME,cAAcuC,SAAhD,eAxErDnD,EAAA,CAAkC2D,aAoFnBC,6BAAiB,CAC9BC,OAAS,2CADID,CAEZ5D,6CC9EkB8D,6MACjBpD,MAAQ,CACJG,KAAM,EACNC,MAAO,EACPyB,SAAU,GACVwB,SAAU,sFAEM,IAAArC,EAAApB,KAChB0D,UAAUC,YAAYC,mBAAmB,SAACV,GACtC9B,EAAKN,SAAS,CAACP,IAAK2C,EAASW,OAAOC,SAAUtD,KAAM0C,EAASW,OAAOE,aACrE,cAGHC,IAAMC,IAAI,0DAA0DC,KAAK,SAACC,GACtE,IAAIC,EAAc,GAElBD,EAAIE,KAAKC,QAAQ,SAAAnC,GACboC,QAAQC,IAAIrC,GACZiC,EAAYK,KAAK,CAAClE,IAAK4B,EAAQ2B,SAAUjC,IAAKM,EAAQ4B,UAAWZ,QAAShB,EAAQgB,QAASH,KAAMb,EAAQuC,kBAE7GH,QAAQC,IAAIJ,GACZhD,EAAKN,SAAS,CAACmB,SAAUmC,uCAG1B,IAAAO,EAAA3E,KACP,OACEqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqD,EAAA,UAAD,mCACE5E,KAAKI,MAAMqD,SACbpC,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAQyB,QAAS,WAAM4B,EAAK7D,SAAS,CAAC2C,SAAQ,MAA9C,qDAIEzD,KAAKI,MAAMqD,SACfpC,EAAAC,EAAAC,cAACuD,EAAD,CAAK7C,SAAUjC,KAAKI,MAAM6B,SAAU1B,IAAKP,KAAKI,MAAMG,IAAKC,KAAMR,KAAKI,MAAMI,eAlChD6C,aCNnB0B,MARf,WACE,OACE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyD,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBhC,WACrBA,UAAUiC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.d0ca2941.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nfunction distance(lat, lng, lat0, lng0){\nlet deglen = 110.25\nlet x = lat - lat0\nlet y = (lng - lng0)*Math.cos(lat0)\nreturn deglen*Math.sqrt(x*x + y*y)\n}\n\nexport class MapContainer extends Component {\n    constructor(props) {\n        super(props)\n       \n    }\n    state = {\n        selectedPlace: 'Hello',\n        lat: -1,\n        long: -1,\n  \n            showingInfoWindow: false,  //Hides or the shows the infoWindow\n            activeMarker: {},          //Shows the active marker upon click\n            selectedPlace: {}          //Shows the infoWindow to the selected place upon a marker\n   \n    }\n\n\n    onMarkerClick = (props, marker, e) =>{\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n          });\n        }\n      \n    onClose = props => {\n        if (this.state.showingInfoWindow) {\n        this.setState({\n            showingInfoWindow: false,\n            activeMarker: null\n        });\n        }\n    };\n    \n  render() {\n      if(this.props.lat === -1 || this.props.long === -1) return (\n          <p> Getting current location...</p>\n      )\n    return (\n        <div className=\"map\">\n        \n      <Map google={this.props.google} zoom={14}\n      \n      initialCenter={{\n        lat: this.props.lat,\n        lng: this.props.long\n      }}\n      style = {{\n        width: '100%',\n        height: '82%'\n      }}\n      >\n         {this.props.stations.map((station,index) => {\n             let dist = distance(this.props.lat,this.props.long,station.lat,station.lng)\n             dist = dist.toFixed(2)\n            return (\n            <Marker  onClick={this.onMarkerClick} name={`${station.name} District Police Station`}key = {index} position={{lat: station.lat, lng: station.lng}} address={station.address} distance={dist}/>\n            )\n        })}\n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'}\n                \n                />\n\n        <InfoWindow\n        marker={this.state.activeMarker}\n        visible={this.state.showingInfoWindow}\n        onClose={this.onClose}\n        >\n            <div>\n              <h5>{this.state.selectedPlace.name}</h5>\n              <p>{this.state.selectedPlace.address}</p>\n              {this.state.selectedPlace.distance && (<p>Distance from you: {this.state.selectedPlace.distance} km</p>)}\n            </div>\n        </InfoWindow>\n\n       \n      </Map>\n    \n    </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyAfEJrEHo2NUcoajXDz6yNj9xOVWRKRlhI')\n})(MapContainer)","import React, { Component } from 'react'\nimport Map from './Map'\nimport axios from 'axios'\nimport Button from '@material/react-button';\nimport {\n    Body1,\n    Body2,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n  } from '@material/react-typography';\nexport default class Home extends Component {\n    state = {\n        lat: -1,\n        long: -1,\n        stations: [],\n        loadMap : false\n    }\n    componentDidMount() {\n        navigator.geolocation.getCurrentPosition((position) => {\n            this.setState({lat: position.coords.latitude, long: position.coords.longitude })\n        }, () => {\n            \n        });\n        axios.get('https://data.cityofchicago.org/resource/9rg7-mz9y.json').then((res) => {\n            let newStations = []\n\n            res.data.forEach(station => {\n                console.log(station)\n                newStations.push({lat: station.latitude, lng: station.longitude, address: station.address, name: station.district_name})\n            });\n            console.log(newStations)\n            this.setState({stations: newStations})\n        })\n    }\n  render() {\n    return (\n      <div>\n          <Headline4> Alex Chomiak IT202 Final</Headline4>\n          {!this.state.loadMap &&\n          <Button onClick={() =>{this.setState({loadMap:true})}}>\n        Click Me to load a map of Chicago Police Stations\n      </Button>\n          }\n          { this.state.loadMap &&\n        <Map stations={this.state.stations} lat={this.state.lat} long={this.state.long}/>\n          }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@material/react-button/dist/button.css';\nimport '@material/react-typography/dist/typography.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}